import { getVariableValue } from "../createVariable";
const cache = /* @__PURE__ */ new WeakMap(), getVariantExtras = (styleState) => {
  if (cache.has(styleState))
    return cache.get(styleState);
  const { curProps, props, conf, context, theme } = styleState;
  let fonts = conf.fontsParsed;
  context?.language && (fonts = getFontsForLanguage(conf.fontsParsed, context.language));
  const next = {
    fonts,
    tokens: conf.tokensParsed,
    theme,
    get fontFamily() {
      return getVariableValue(
        styleState.fontFamily || styleState.curProps.fontFamily || styleState.conf.defaultFont
      );
    },
    get font() {
      return fonts[this.fontFamily] || fonts[styleState.conf.defaultFont];
    },
    // TODO do this in splitstlye
    // we avoid passing in default props for media queries because that would confuse things like SizableText.size:
    props: new Proxy(props, {
      // handles shorthands
      get(target, key) {
        for (const tryKey of [key, conf.inverseShorthands[key]])
          if (tryKey)
            return Reflect.has(curProps, tryKey) ? Reflect.get(curProps, tryKey) : Reflect.get(target, tryKey);
      }
    })
  };
  return cache.set(styleState, next), next;
}, fontLanguageCache = /* @__PURE__ */ new WeakMap();
function getFontsForLanguage(fonts, language) {
  if (fontLanguageCache.has(language))
    return fontLanguageCache.get(language);
  const next = {
    ...fonts,
    ...Object.fromEntries(
      Object.entries(language).map(([name, lang]) => {
        if (lang === "default")
          return [];
        const langKey = `$${name}_${lang}`;
        return [`$${name}`, fonts[langKey]];
      })
    )
  };
  return fontLanguageCache.set(language, next), next;
}
export {
  getFontsForLanguage,
  getVariantExtras
};
//# sourceMappingURL=getVariantExtras.js.map
