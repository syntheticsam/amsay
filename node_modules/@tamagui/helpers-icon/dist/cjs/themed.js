var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var themed_exports = {};
__export(themed_exports, {
  themed: () => themed
});
module.exports = __toCommonJS(themed_exports);
var import_core = require("@tamagui/core"), import_react = __toESM(require("react")), import_jsx_runtime = require("react/jsx-runtime");
import_react.default.keep;
function themed(Component, opts = {
  defaultThemeColor: process.env.DEFAULT_ICON_THEME_COLOR || "$color",
  defaultStrokeWidth: 2,
  fallbackColor: "#000"
}) {
  return (propsIn) => {
    const [props, style, theme] = (0, import_core.usePropsAndStyle)(propsIn, {
      ...opts,
      forComponent: import_core.Text,
      resolveValues: "web"
      // iOS doesnt support dynamic values for SVG so only optimize on web
    }), defaultColor = style.color ?? opts.defaultThemeColor, color = (0, import_core.getVariable)(
      (defaultColor ? theme[defaultColor] : void 0) || style.color || (props.disableTheme ? null : theme.color) || opts.fallbackColor
    ), size = typeof props.size == "string" ? (0, import_core.getTokenValue)(props.size, "size") : props.size, strokeWidth = typeof props.strokeWidth == "string" ? (0, import_core.getTokenValue)(props.strokeWidth, "size") : props.strokeWidth ?? `${opts.defaultStrokeWidth}`;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Component,
      {
        ...props,
        color,
        size,
        strokeWidth,
        style
      }
    );
  };
}
//# sourceMappingURL=themed.js.map
